#!/usr/bin/env bash
# Minimal example: scan staged changes for secrets with Nosey Parker.
# - If Nosey Parker is not installed, print a note and allow the commit.
# - Scans staged files by materializing them into a temp dir.
# - Blocks the commit if findings are reported.

set -euo pipefail

# --- Update RSS feed dates from post modification times ---
update_rss_dates() {
  local feed="feed.xml"
  [[ -f "$feed" ]] || return 0

  # Helpers: portable stat/date
  file_epoch() {
    # GNU stat: -c %Y, BSD stat: -f %m
    if epoch=$(stat -c %Y "$1" 2>/dev/null); then
      printf '%s' "$epoch"
    else
      stat -f %m "$1" 2>/dev/null || true
    fi
  }
  rfc822() {
    # GNU date: -d @EPOCH; BSD: -r EPOCH
    date -u -d @"$1" '+%a, %d %b %Y %H:%M:%S +0000' 2>/dev/null \
      || date -ur "$1" '+%a, %d %b %Y %H:%M:%S +0000'
  }

  local tmp
  tmp=$(mktemp -d 2>/dev/null || mktemp -d -t rss)
  local out="$tmp/feed.xml"
  local current_post_path="" current_epoch="" max_epoch=0

  while IFS= read -r line; do
    if [[ $line =~ \<link\>https?://storbeck\.dev/(posts/[^<]+)\</link\> ]]; then
      current_post_path="${BASH_REMATCH[1]}"
      if [[ -f "$current_post_path" ]]; then
        current_epoch=$(file_epoch "$current_post_path" || true)
        if [[ -n "${current_epoch:-}" && $current_epoch -gt ${max_epoch:-0} ]]; then
          max_epoch=$current_epoch
        fi
      else
        current_epoch=""
      fi
      printf '%s\n' "$line" >> "$out"
      continue
    fi

    if [[ -n "${current_post_path:-}" && $line =~ \<pubDate\>.*\</pubDate\> ]]; then
      if [[ -n "${current_epoch:-}" ]]; then
        printf '      <pubDate>%s</pubDate>\n' "$(rfc822 "$current_epoch")" >> "$out"
      else
        printf '%s\n' "$line" >> "$out"
      fi
      current_post_path=""
      current_epoch=""
      continue
    fi

    printf '%s\n' "$line" >> "$out"
  done < "$feed"

  if [[ ${max_epoch:-0} -gt 0 ]]; then
    local max_rfc
    max_rfc=$(rfc822 "$max_epoch")
    # In-place replace lastBuildDate
    sed -E "s|<lastBuildDate>.*</lastBuildDate>|<lastBuildDate>${max_rfc}</lastBuildDate>|" "$out" > "$out.tmp" && mv "$out.tmp" "$out"
  fi

  if ! cmp -s "$feed" "$out"; then
    mv "$out" "$feed"
    git add "$feed" >/dev/null 2>&1 || true
  else
    rm -f "$out"
  fi
  rm -rf "$tmp" || true
}

update_rss_dates || true

if ! command -v noseyparker >/dev/null 2>&1; then
  echo "[noseyparker] Not installed. Install: https://github.com/praetorian-inc/noseyparker"
  echo "[noseyparker] Proceeding without scan."
  exit 0
fi

# Collect staged files (Added, Copied, Modified, Renamed)
mapfile -t FILES < <(git diff --cached --name-only --diff-filter=ACMR)
if [[ ${#FILES[@]} -eq 0 ]]; then
  exit 0
fi

TMPDIR=$(mktemp -d 2>/dev/null || mktemp -d -t np)
cleanup() { rm -rf "$TMPDIR" || true; }
trap cleanup EXIT INT TERM

# Materialize the staged content into the temp dir
materialized_any=0
for f in "${FILES[@]}"; do
  # Only consider regular files that exist in the index
  if git cat-file -e ":$f" 2>/dev/null; then
    mkdir -p "$TMPDIR/$(dirname "$f")"
    git show ":$f" > "$TMPDIR/$f" || true
    materialized_any=1
  fi
done

if [[ "$materialized_any" -ne 1 ]]; then
  exit 0
fi

DATASTORE="$TMPDIR/datastore"

# Run scan quietly; Nosey Parker stores results in the datastore.
if ! noseyparker scan --datastore "$DATASTORE" "$TMPDIR" >/dev/null 2>&1; then
  echo "[noseyparker] Scan failed to run. Failing commit."
  exit 1
fi

# Generate a human-readable report. If empty, no findings.
REPORT=$(noseyparker report --datastore "$DATASTORE" 2>/dev/null || true)

if [[ -z "$REPORT" ]]; then
  # Some versions may still produce headers with no findings. Also check size of the datastore.
  # If the report is empty, consider it clean.
  exit 0
fi

# Heuristic: if the report contains non-whitespace characters beyond a small threshold, treat as findings.
trimmed=$(echo "$REPORT" | sed 's/[[:space:]]//g')
if [[ -n "$trimmed" ]]; then
  echo "[noseyparker] Potential secrets detected in staged changes."
  echo "------------------------------------------------------------"
  echo "$REPORT" | sed -n '1,200p'
  echo "------------------------------------------------------------"
  echo "Remove/rotate the secret(s) before committing."
  echo "Docs: https://github.com/praetorian-inc/noseyparker"
  exit 1
fi

exit 0
